(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[927],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,h=d["".concat(l,".").concat(u)]||d[u]||m[u]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7141:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),o=["components"],s={id:"howto",title:"How to use Gatekeeper"},l=void 0,p={unversionedId:"howto",id:"howto",isDocsHomePage:!1,title:"How to use Gatekeeper",description:"Gatekeeper uses the OPA Constraint Framework to describe and enforce policy. Look there for more detailed information on their semantics and advanced usage.",source:"@site/docs/howto.md",sourceDirName:".",slug:"/howto",permalink:"/gatekeeper/website/docs/howto",editUrl:"https://github.com/open-policy-agent/gatekeeper/edit/master/website/docs/howto.md",version:"current",frontMatter:{id:"howto",title:"How to use Gatekeeper"},sidebar:"docs",previous:{title:"Examples",permalink:"/gatekeeper/website/docs/examples"},next:{title:"Audit",permalink:"/gatekeeper/website/docs/audit"}},c=[{value:"Constraint Templates",id:"constraint-templates",children:[]},{value:"Constraints",id:"constraints",children:[]}],m={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Gatekeeper uses the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/open-policy-agent/frameworks/tree/master/constraint"},"OPA Constraint Framework")," to describe and enforce policy. Look there for more detailed information on their semantics and advanced usage."),(0,i.kt)("h2",{id:"constraint-templates"},"Constraint Templates"),(0,i.kt)("p",null,"Before you can define a constraint, you must first define a ",(0,i.kt)("inlineCode",{parentName:"p"},"ConstraintTemplate"),", which describes both the ",(0,i.kt)("a",{parentName:"p",href:"https://www.openpolicyagent.org/docs/latest/#rego"},"Rego")," that enforces the constraint and the schema of the constraint. The schema of the constraint allows an admin to fine-tune the behavior of a constraint, much like arguments to a function."),(0,i.kt)("p",null,"Here is an example constraint template that requires all labels described by the constraint to be present:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.gatekeeper.sh/v1beta1\nkind: ConstraintTemplate\nmetadata:\n  name: k8srequiredlabels\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sRequiredLabels\n      validation:\n        # Schema for the `parameters` field\n        openAPIV3Schema:\n          properties:\n            labels:\n              type: array\n              items: string\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package k8srequiredlabels\n\n        violation[{"msg": msg, "details": {"missing_labels": missing}}] {\n          provided := {label | input.review.object.metadata.labels[label]}\n          required := {label | label := input.parameters.labels[_]}\n          missing := required - provided\n          count(missing) > 0\n          msg := sprintf("you must provide labels: %v", [missing])\n        }\n')),(0,i.kt)("p",null,"You can install this ConstraintTemplate with the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/master/demo/basic/templates/k8srequiredlabels_template.yaml\n")),(0,i.kt)("h2",{id:"constraints"},"Constraints"),(0,i.kt)("p",null,"Constraints are then used to inform Gatekeeper that the admin wants a ConstraintTemplate to be enforced, and how. This constraint uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"K8sRequiredLabels")," constraint template above to make sure the ",(0,i.kt)("inlineCode",{parentName:"p"},"gatekeeper")," label is defined on all namespaces:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sRequiredLabels\nmetadata:\n  name: ns-must-have-gk\nspec:\n  match:\n    kinds:\n      - apiGroups: [""]\n        kinds: ["Namespace"]\n  parameters:\n    labels: ["gatekeeper"]\n')),(0,i.kt)("p",null,"You can install this Constraint with the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/master/demo/basic/constraints/all_ns_must_have_gatekeeper.yaml\n")),(0,i.kt)("p",null,"Note the ",(0,i.kt)("inlineCode",{parentName:"p"},"match")," field, which defines the scope of objects to which a given constraint will be applied. It supports the following matchers:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"kinds")," accepts a list of objects with ",(0,i.kt)("inlineCode",{parentName:"li"},"apiGroups")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"kinds")," fields that list the groups/kinds of objects to which the constraint will apply. If multiple groups/kinds objects are specified, only one match is needed for the resource to be in scope."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"scope")," accepts ",(0,i.kt)("inlineCode",{parentName:"li"},"*"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Cluster"),", or ",(0,i.kt)("inlineCode",{parentName:"li"},"Namespaced")," which determines if cluster-scoped and/or namesapced-scoped resources are selected. (defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"*"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"namespaces")," is a list of namespace names. If defined, a constraint will only apply to resources in a listed namespace."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"excludedNamespaces")," is a list of namespace names. If defined, a constraint will only apply to resources not in a listed namespace."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"labelSelector")," is a standard Kubernetes label selector."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"namespaceSelector")," is a standard Kubernetes namespace selector. If defined, make sure to add ",(0,i.kt)("inlineCode",{parentName:"li"},"Namespaces")," to your ",(0,i.kt)("inlineCode",{parentName:"li"},"configs.config.gatekeeper.sh")," object to ensure namespaces are synced into OPA. Refer to the ",(0,i.kt)("a",{parentName:"li",href:"/gatekeeper/website/docs/sync"},"Replicating Data section")," for more details.")),(0,i.kt)("p",null,"Note that if multiple matchers are specified, a resource must satisfy each top-level matcher (",(0,i.kt)("inlineCode",{parentName:"p"},"kinds"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"namespaces"),", etc.) to be in scope. Each top-level matcher has its own semantics for what qualifies as a match. An empty matcher is deemed to be inclusive (matches everything). Also understand ",(0,i.kt)("inlineCode",{parentName:"p"},"namespaces"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"excludedNamespaces"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"namespaceSelector")," will match on cluster scoped resources which are not namespaced. To avoid this adjust the ",(0,i.kt)("inlineCode",{parentName:"p"},"scope")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"Namespaced"),"."))}d.isMDXComponent=!0}}]);